{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.js"],"sourcesContent":["import { NextResponse } from 'next/server'\n \nconst allowedOrigins = ['*']\n \nconst corsOptions = {\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization, x-api-key',\n  'Access-Control-Allow-Origin': '*'\n}\n\nexport function middleware(request) {\n  // Check the origin from the request\n  const origin = request.headers.get('origin') ?? ''\n  const isAllowedOrigin = allowedOrigins.includes(origin)\n \n  // Handle preflighted requests\n  const isPreflight = request.method === 'OPTIONS'\n \n  if (isPreflight) {\n    const preflightHeaders = {\n      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),\n      ...corsOptions,\n    }\n    return NextResponse.json({}, { headers: preflightHeaders })\n  }\n \n  // Handle simple requests\n  const response = NextResponse.next()\n \n  if (isAllowedOrigin) {\n    response.headers.set('Access-Control-Allow-Origin', origin)\n  }\n \n  Object.entries(corsOptions).forEach(([key, value]) => {\n    response.headers.set(key, value)\n  })\n \n  return response\n}\n \nexport const config = {\n  matcher: '/api/:path*',\n}"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEA,MAAM,iBAAiB;IAAC;CAAI;AAE5B,MAAM,cAAc;IAClB,gCAAgC;IAChC,gCAAgC;IAChC,+BAA+B;AACjC;AAEO,SAAS,WAAW,OAAO;IAChC,oCAAoC;IACpC,MAAM,SAAS,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa;IAChD,MAAM,kBAAkB,eAAe,QAAQ,CAAC;IAEhD,8BAA8B;IAC9B,MAAM,cAAc,QAAQ,MAAM,KAAK;IAEvC,IAAI,aAAa;QACf,MAAM,mBAAmB;YACvB,GAAI,mBAAmB;gBAAE,+BAA+B;YAAO,CAAC;YAChE,GAAG,WAAW;QAChB;QACA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC,CAAC,GAAG;YAAE,SAAS;QAAiB;IAC3D;IAEA,yBAAyB;IACzB,MAAM,WAAW,6LAAA,CAAA,eAAY,CAAC,IAAI;IAElC,IAAI,iBAAiB;QACnB,SAAS,OAAO,CAAC,GAAG,CAAC,+BAA+B;IACtD;IAEA,OAAO,OAAO,CAAC,aAAa,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM;QAC/C,SAAS,OAAO,CAAC,GAAG,CAAC,KAAK;IAC5B;IAEA,OAAO;AACT;AAEO,MAAM,SAAS;IACpB,SAAS;AACX"}}]
}